const DOMAIN = "notifications.2u.com";
const NOTIFICATION_PAGE = "/profile/communication";
const TITLE_TEXT = "Push Notification";
const SUB_TITLE_TEXT = "Degrees edX App";
const UNSUPPORTED_TEXT = "Notifications unsupported";
const BLOCKED_IDS = ["grading_policies", "files", "announcement_created_by_you", "all_submissions", "late_grading", "blueprint", "discussion", "discussion_entry", "added_to_conversation", "conversation_created", "appointment_signups", "membership_update", "recording_ready", "other", "content_link_error", "account_notification"];

const SETTINGS_PAGE = "/profile/settings";

var nodeChangesObserver;

let idSet = new Set();
let blockedIdSet = new Set();

function startCheckForSwitchChanges(targetNode) {
    let config = { attributes: false, childList: true, subtree: true };
    
    let callback = (mutationList, observer) => {
        let walker = document.createTreeWalker(targetNode, NodeFilter.SHOW_TEXT, null);
        let textNode = walker.nextNode();
        textNode.textContent = SUB_TITLE_TEXT;
    };
    
    if (nodeChangesObserver) nodeChangesObserver.disconnect();
    nodeChangesObserver = new MutationObserver(callback);
    nodeChangesObserver.observe(targetNode, config);
}

function getPositionId(spanElement) {
    let parentNode = spanElement.parentNode;
    if (parentNode) {
        if (parentNode.hasAttribute("data-position-content")) {
            return parentNode.getAttribute("data-position-content");
            
        } else {
            return getPositionId(parentNode);
        }
        
    } else {
        return null;
    }
}

function startCheckForChanges() {
    let config = { attributes: false, childList: true, subtree: true };
    
    let callback = (mutationList, observer) => {
        let spanElement = document.querySelector("span ul[role=menu]");
        if (spanElement) {
            let id = getPositionId(spanElement);
            if (id && idSet.has(id)) {
                let liElements = spanElement.getElementsByTagName("li");
                if (liElements.length == 4) {
                    liElements[1].style.display = "none";
                    liElements[2].style.display = "none";
                    
                    if (blockedIdSet.has(id)) {
                        if (liElements[0].childNodes.length > 0) {
                            liElements[0].childNodes[0].style.opacity = 0.5;
                            liElements[0].childNodes[0].style.cursor = "default";
                            liElements[0].childNodes[0].style.pointerEvents = "none";
                        }
                        if (liElements[3].childNodes.length > 0) {
                            liElements[3].childNodes[0].style.opacity = 0.5;
                            liElements[3].childNodes[0].style.cursor = "default";
                            liElements[3].childNodes[0].style.pointerEvents = "none";
                        }
                    }
                }
            }
        }
        
        var thElements = getThElements();
        if (thElements) processNotificationSettings(thElements);
    };
    
    const observer = new MutationObserver(callback);
    observer.observe(document.body, config);
}

function processNotificationSettings(thElements) {
    var elementIndex = -1;
    
    for (i = 0; i < thElements.length; i++) {
        if (thElements[i].textContent.indexOf(DOMAIN) != -1) {
            elementIndex = i;
            break;
        }
    }
    
    if (elementIndex == -1) return false;
    
    let theadSelector = document.querySelector("table thead");
    let selectedElement = theadSelector.getElementsByTagName("th")[elementIndex];
    
    var walker = document.createTreeWalker(selectedElement, NodeFilter.SHOW_TEXT, null);
    var textNode = walker.nextNode();
    textNode.textContent = TITLE_TEXT;
    
    textNode = walker.nextNode();
    textNode.textContent = SUB_TITLE_TEXT;
    
    startCheckForSwitchChanges(selectedElement.getElementsByTagName("div")[1]);
    
    let allTrElements = document.querySelectorAll("table tbody tr");
    for (let element of allTrElements) {
        let childNodes = element.childNodes;
        if (elementIndex < childNodes.length) {
            if (childNodes[elementIndex].childNodes.length > 0) {
                if (childNodes[elementIndex].childNodes[0].hasAttribute("data-position")) {
                    let id = childNodes[elementIndex].childNodes[0].getAttribute("data-position");
                    idSet.add(id);
                
                    if (element.hasAttribute("data-testid") && BLOCKED_IDS.includes(element.getAttribute("data-testid"))) {
                        let svgElement = childNodes[elementIndex].childNodes[0].querySelector("svg");
                        if (svgElement) {
                            svgElement.innerHTML = '<g role="presentation"><path d="M1599.04,1523.62667 L396.373333,320.96 C546.88,188.053333 743.786667,106.666667 960,106.666667 C1430.50667,106.666667 1813.33333,489.493333 1813.33333,960 C1813.33333,1176.10667 1731.94667,1373.12 1599.04,1523.62667 M106.666667,960 C106.666667,743.786667 187.946667,546.88 320.96,396.373333 L1523.62667,1599.04 C1373.12,1731.94667 1176.10667,1813.33333 960,1813.33333 C489.493333,1813.33333 106.666667,1430.50667 106.666667,960 M960,0 C429.76,0 0,429.76 0,960 C0,1490.24 429.76,1920 960,1920 C1490.13333,1920 1920,1490.24 1920,960 C1920,429.76 1490.13333,0 960,0" fill-rule="evenodd" stroke="none" stroke-width="1"></path></g>';
                            let parentSvgNode = svgElement.parentNode.parentNode;
                            if (parentSvgNode && parentSvgNode.length > 1) {
                                parentSvgNode.childNodes[1].textContent = "Notifications unsupported";
                            }
                        }
                        
                        let buttonElement = childNodes[elementIndex].childNodes[0].querySelector("button");
                        if (buttonElement && buttonElement.hasAttribute("aria-describedby")) {
                            let id = buttonElement.getAttribute("aria-describedby");
                            let popupElement = document.getElementById(id);
                            if (popupElement) {
                                popupElement.textContent = UNSUPPORTED_TEXT;
                            }
                        }
                        
                        blockedIdSet.add(id);
                    }
                }
            }
        }
    }
    
    document.querySelector("table:nth-child(2) thead").setAttribute("setup", "true");
    
    console.log("DONE!");
    
    return true;
}

function getThElements() {
    let theadSelector = document.querySelector("table:nth-child(2) thead");
    if (theadSelector && !theadSelector.hasAttribute("setup")) return theadSelector.getElementsByTagName("th");
    return null;
}

function startObserver() {
    let targetNode = document.getElementById("content");
    if (!targetNode) return false;
    
    let config = { attributes: false, childList: true, subtree: true };
    
    let callback = (mutationList, observer) => {
        let thElements = getThElements();
        if (thElements) {
            observer.disconnect();
            if (processNotificationSettings(thElements)) startCheckForChanges();
        }
    };
    
    const observer = new MutationObserver(callback);
    observer.observe(targetNode, config);
    
    return true;
}

if (window.location.href.indexOf(NOTIFICATION_PAGE) != -1) {
    var thElements = getThElements();
    
    if (thElements) {
        if (processNotificationSettings(thElements)) startCheckForChanges();
        
    } else {
        if (!startObserver()) {
            window.addEventListener("load", (event) => { startObserver(); });
        }
    }
    
} else if (window.location.href.indexOf(SETTINGS_PAGE) != -1) {
    let channelElements = document.querySelectorAll("table.email_channels tr.channel")
    for (let element of channelElements) {
        if (element.querySelector(".email_channel").textContent.indexOf(DOMAIN) != -1) {
            element.style.display = "none";
        }
    }
}
